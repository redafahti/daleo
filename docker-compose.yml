version: 'Compose specification'
# Run as: docker-compose build; and then: docker-compose up -d
# Check with: docker ps Then check the logs with:
# docker logs --tail 50 $container_id
# docker-compose images
# docker-compose logs --tail 20 repo_name

services:
  database:
    container_name: team_up_db
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${TEAM_UP_DB}
    volumes:
      - team_up_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-tier
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:latest
    env_file:
      - .env
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT}:80"
    networks:
      - app-tier
    restart: unless-stopped

  redis:
    container_name: redis_container
    image: "redis:latest"
    volumes:
      - app-cash-data:/data
    ports:
      - "6379:6379"
    networks:
      - app-tier
    restart: unless-stopped

  team-up-app:
    container_name: team_up_backend
    image: 'marouanesanhaji/team-up-backend:${TAG-latest}'
    env_file:
      - .env
    build:
      context: ./backend
      dockerfile: backend.Dockerfile
    restart: unless-stopped
    volumes:
      - ./backend/app:/code/app
      - ./backend/app/public:/code/public
    depends_on:
      - database
      - redis
    networks:
      - app-tier
    ports:
      - "8000:8000"
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000

  team-up-frontend:
    container_name: team_up_frontend
    image: node:alpine
    build:
      context: ./frontend
      dockerfile: frontend.Dockerfile
    restart: unless-stopped
    volumes:
      - ./frontend:/frontend
    networks:
      - app-tier
    ports:
      - "5173:5173"
    command: npm run dev

volumes:
  backend:
  frontend:
  app-cash-data:
  pgadmin:
  team_up_data:
    driver: local

networks:
  app-tier:
    driver: bridge
